/*
 * stopwatch.c
 *
 *  Created on: Apr 12, 2023
 *      Author: Ahmed
 */


#include <avr/io.h>
#include <util/delay.h>

unsigned char tick =0;
unsigned char seconds_L =0;
unsigned char seconds_R =0;
unsigned char min_L =0;
unsigned char minutes_R =0;
unsigned char hours_L =0;
unsigned char hours_R =0;

/*
 External INT0 Interrupt Service Routine
ISR(INT0_vect)
{

}

 External INT1 Interrupt Service Routine
ISR(INT1_vect)
{

}

 External INT2 Interrupt Service Routine
ISR(INT2_vect)
{

}*/

ISR(TIMER1_COMPA_vect){

	tick ++;
	seconds_R ++;
	if (seconds_R == 10){
		seconds_R =0;
		seconds_L ++;
	}
	if (seconds_L == 6 && seconds_R ==0 ){
		seconds_R =0;
		seconds_L =0;
		minutes_R ++;
	}
	if (min_L == 10){
		min_L =0;
		minutes_R ++;
	}
	if (minutes_R == 6){
		min_L =0;
		minutes_R =0;
		hours_R ++;
	}
	if (hours_R == 10){
		hours_R =0;
		hours_L ++;
	}
	if (hours_L== 10){
		seconds_L =0;
		seconds_R =0;
		min_L =0;
		minutes_R =0;
		hours_L =0;
		hours_R =0;

	}
}


/* External INT0 enable and configuration function */
void INT0_Init(void)
{
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
	MCUCR &=~ (1<<ISC00) ;
	MCUCR |= (1<<ISC01);               // Trigger INT0 with the falling edge
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
}



/* External INT1 enable and configuration function */
void INT1_Init(void)
{
	DDRD  &= (~(1<<PD3));  // Configure INT1/PD3 as input pin
	// Trigger INT1 with the rising edge
	MCUCR |= (1<<ISC11) | (1<<ISC10);
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
}


/* External INT2 enable and configuration function */
void INT2_Init(void)
{
	DDRB   &= (~(1<<PB2));   // Configure INT2/PB2 as input pin
	MCUCSR &=~ (1<<ISC2);     // Trigger INT2 with the falling edge
	GICR   |= (1<<INT2);	 // Enable external interrupt pin INT2
	SREG   |= (1<<7);        // Enable interrupts by setting I-bit
}

void TIMER1_INIT(void){
	TCCR1A = (1<<COM1A1) | (1<<COM1A0);
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
	TIMSK |= (1<<OCIE1A);
	TCNT1 = 0;
	OCR1A = 1000;  // one sec
}

void TIMER1_OFF(void){
	TCCR1B &=~ (1<<CS11);
	TCCR1B &=~ (1<<CS10);
	TCCR1B &=~ (1<<CS12);
}


int main(void)
{
	DDRA |= 0x3F;  // selection
	DDRC |= 0x0F; // configure first four pins of PORTC as output pins




	INT0_Init();              // Enable external INT0
	INT1_Init();    // Enable and configure external INT1
	INT2_Init();    // Enable and configure external INT2


while(1){

	// change the seconds Right

	PORTA =(1<<0) ;
	PORTC = (PORTC & 0xF0) | (seconds_R & 0x0F);
	_delay_ms (10);

	// change the seconds Left

	PORTA =(1<<1) ;
	PORTC = (PORTC & 0xF0) | (seconds_L & 0x0F);
	_delay_ms(10);

	// change the minutes right

	PORTA =(1<<2) ;
	PORTC = (PORTC & 0xF0) | (minutes_R & 0x0F);
	_delay_ms(10);

	// change the minutes left

	PORTA =(1<<3) ;
	PORTC = (PORTC & 0xF0) | (min_L & 0x0F);
	_delay_ms(10);

	// change the hours Left

	PORTA =(1<<4) ;
	PORTC = (PORTC & 0xF0) | (hours_L & 0x0F);
	_delay_ms(10);

	// change the hours right

	PORTA =(1<<5) ;
	PORTC = (PORTC & 0xF0) | (hours_R & 0x0F);
	_delay_ms(10);

}

}

